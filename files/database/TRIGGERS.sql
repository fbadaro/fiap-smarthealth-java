CREATE OR REPLACE TRIGGER TR_DELETE_POSTOSAUDE    
FOR UPDATE ON HT01_SAUDE
COMPOUND TRIGGER    
    E_NOT_EXISTS_POSTO EXCEPTION;    
    V_EXISTS NUMBER;
    V_OLD_POSTOID HT01_SAUDE.PS_ID%TYPE;   
    V_OLD_POSTOBAIRRO HT01_SAUDE.PS_BAIRRO%TYPE;
    V_NEW_POSTO HT01_SAUDE%ROWTYPE;
AFTER EACH ROW IS
BEGIN
    V_OLD_POSTOID := :OLD.PS_ID;
    V_OLD_POSTOBAIRRO := :OLD.PS_BAIRRO;    
END AFTER EACH ROW;

AFTER STATEMENT IS
BEGIN          
    SELECT COUNT(*) INTO V_EXISTS
    FROM HT01_SAUDE
    WHERE PS_BAIRRO = V_OLD_POSTOBAIRRO AND PS_ID != V_OLD_POSTOID;    
    
    IF V_EXISTS = 0 THEN
        RAISE E_NOT_EXISTS_POSTO;
    ELSE
        SELECT * INTO V_NEW_POSTO
        FROM HT01_SAUDE
        WHERE PS_BAIRRO = V_OLD_POSTOBAIRRO AND ROWNUM = 1;
    END IF;
    
    -- LOOP MEDICOS
    FOR C_MEDICO IN(SELECT * FROM R01_HT01_HT02 WHERE SAUDE_PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE R01_HT01_HT02 SET SAUDE_PS_ID = V_NEW_POSTO.PS_ID WHERE SAUDE_PS_ID = V_OLD_POSTOID;
        END LOOP;
    
    -- LOOP AGENTES DE SAUDE
    FOR C_AGSAUDE IN(SELECT * FROM HT03_AGSAUDE WHERE PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE HT03_AGSAUDE SET PS_ID = V_NEW_POSTO.PS_ID WHERE PS_ID = V_OLD_POSTOID;
        END LOOP;
        
    -- LOOP FAMILIAS
    FOR C_FAMILIA IN(SELECT * FROM HT04_FAMILIA WHERE PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE HT04_FAMILIA SET PS_ID = V_NEW_POSTO.PS_ID WHERE PS_ID = V_OLD_POSTOID;
        END LOOP;
    
    -- DBMS_OUTPUT.PUT_LINE('POSTO ' || V_NEW_POSTO.PS_BAIRRO || V_NEW_POSTO.PS_NOME);
    
    EXCEPTION
        WHEN E_NOT_EXISTS_POSTO THEN
            INSERT INTO HT12_ERRO VALUES(ERRO_ID_SEQ.nextval, '-1234', 'NAO EXISTE POSTO DE SAUDE NO MESMO MUNICIPIO');
            DBMS_OUTPUT.PUT_LINE('NAO EXISTE POSTO DE SAUDE NO MESMO MUNICIPIO' || V_OLD_POSTOID);
END AFTER STATEMENT;

END;


===================================


CREATE OR REPLACE TRIGGER TR_DELETE_POSTOSAUDE    
BEFORE DELETE ON HT01_SAUDE 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    E_NOT_EXISTS_POSTO EXCEPTION;  
    V_EXISTS NUMBER;
    V_OLD_POSTOID HT01_SAUDE.PS_ID%TYPE;   
    V_OLD_POSTOBAIRRO HT01_SAUDE.PS_BAIRRO%TYPE;
    V_NEW_POSTO HT01_SAUDE%ROWTYPE;
BEGIN    
    
    V_OLD_POSTOID := :OLD.PS_ID;
    V_OLD_POSTOBAIRRO := :OLD.PS_BAIRRO; 
    V_EXISTS := 0;
    
    SELECT COUNT(*) INTO V_EXISTS
    FROM HT01_SAUDE
    WHERE PS_BAIRRO = V_OLD_POSTOBAIRRO AND PS_ID != V_OLD_POSTOID;    
    
    DBMS_OUTPUT.PUT_LINE('BEFORE STATEMENT ');
    
    IF V_EXISTS = 0 THEN
        RAISE E_NOT_EXISTS_POSTO;
    ELSE
        SELECT * INTO V_NEW_POSTO
        FROM HT01_SAUDE
        WHERE PS_BAIRRO = V_OLD_POSTOBAIRRO AND ROWNUM = 1;
    END IF;
    
    -- LOOP MEDICOS
    FOR C_MEDICO IN(SELECT * FROM R01_HT01_HT02 WHERE SAUDE_PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE R01_HT01_HT02 SET SAUDE_PS_ID = V_NEW_POSTO.PS_ID WHERE SAUDE_PS_ID = V_OLD_POSTOID;
            COMMIT;
        END LOOP;
    
    -- LOOP AGENTES DE SAUDE
    FOR C_AGSAUDE IN(SELECT * FROM HT03_AGSAUDE WHERE PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE HT03_AGSAUDE SET PS_ID = V_NEW_POSTO.PS_ID WHERE PS_ID = V_OLD_POSTOID;
            COMMIT;
        END LOOP;
        
    -- LOOP FAMILIAS
    FOR C_FAMILIA IN(SELECT * FROM HT04_FAMILIA WHERE PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE HT04_FAMILIA SET PS_ID = V_NEW_POSTO.PS_ID WHERE PS_ID = V_OLD_POSTOID;
            COMMIT;
        END LOOP;    
    
    EXCEPTION
        WHEN E_NOT_EXISTS_POSTO THEN
            INSERT INTO HT12_ERRO VALUES(ERRO_ID_SEQ.nextval, '-1234', 'NAO EXISTE POSTO');
            DBMS_OUTPUT.PUT_LINE('NAO EXISTE POSTO DE SAUDE NO MESMO MUNICIPIO' || V_OLD_POSTOID);   
END;


===================================


CREATE OR REPLACE PROCEDURE PR_NOTIFICAR_VACINA
IS
BEGIN           
    FOR C_REGVACINA IN(SELECT * FROM HT06_REGVACIN WHERE RV_VENCIMENTO < ADD_MONTHS(SYSDATE, 1) AND RV_NOTIFICADO = 0)
        LOOP
            INSERT INTO HT11_NOTIFICACAO VALUES 
            (
                NOTIFICACAO_ID_SEQ.nextval,
                'EMAIL',
                'Sua vacina ' || C_REGVACINA.RV_NOME || ' ira vencer em 30 dias, agende-ja sua nova dose.'
            );
            
            UPDATE HT06_REGVACIN SET RV_NOTIFICADO = '1' WHERE RV_ID = C_REGVACINA.RV_ID;
        END LOOP;
END;


BEGIN

DBMS_SCHEDULER.CREATE_JOB
(
	JOB_NAME => 'NOTIFICAR_VACINACAO',
	JOB_TYPE => 'STORED_PROCEDURE',
	JOB_ACTION => 'PR_NOTIFICAR_VACINA',
	START_DATE => SYSDATE,
	REPEAT_INTERVAL => 'FREQ=DAILY;INTERVAL=1',
	ENABLED => TRUE,
	COMMENTS => 'INSERE NA TABELA DE NOTIFICACAO UMA MENSAGEM PARA OS USUARIOS QUE ESTAO COM VENCIMENTO DE 1 MES PARA FRENTE DE SUAS RESPECTIVAS VACINAS.'
);

END;
