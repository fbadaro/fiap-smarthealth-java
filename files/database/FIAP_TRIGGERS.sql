CREATE OR REPLACE TRIGGER TR_DELETE_POSTOSAUDE    
AFTER UPDATE ON HT01_SAUDE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
    DECLARE 
        E_NOT_EXISTS_POSTO EXCEPTION;    
        V_EXISTS NUMBER;
        V_OLD_POSTOID HT01_SAUDE.PS_ID%TYPE;   
        V_OLD_POSTOBAIRRO HT01_SAUDE.PS_BAIRRO%TYPE;
BEGIN       
    V_OLD_POSTOID := :OLD.PS_ID;
    V_OLD_POSTOBAIRRO := :OLD.PS_BAIRRO;
    
    PR_DELETE_POSTOSAUDE(V_OLD_POSTOID, V_OLD_POSTOBAIRRO);
    
    EXCEPTION
        WHEN E_NOT_EXISTS_POSTO THEN
            DBMS_OUTPUT.PUT_LINE('NAO EXISTE POSTO DE SAUDE ' || V_OLD_POSTOID);
END;


=======================


CREATE OR REPLACE PROCEDURE PR_DELETE_POSTOSAUDE (
    V_POSTOID IN HT01_SAUDE.PS_ID%TYPE,
    V_POSTOBAIRRO IN HT01_SAUDE.PS_BAIRRO%TYPE
) IS

V_EXISTS NUMBER;

BEGIN       
    
    -- VERIFICAR OUTRO POSTO DE SAUDE POR BAIRRO
    SELECT COUNT(*) INTO V_EXISTS
    FROM HT01_SAUDE
    WHERE PS_BAIRRO = V_POSTOBAIRRO AND PS_ID != V_POSTOID; 
    
    DBMS_OUTPUT.PUT_LINE('POSTO ID ' || V_EXISTS);
END;


========================


CREATE OR REPLACE TRIGGER TR_DELETE_POSTOSAUDE    
FOR UPDATE ON HT01_SAUDE
COMPOUND TRIGGER    
    E_NOT_EXISTS_POSTO EXCEPTION;    
    V_EXISTS NUMBER;
    V_OLD_POSTOID HT01_SAUDE.PS_ID%TYPE;   
    V_OLD_POSTOBAIRRO HT01_SAUDE.PS_BAIRRO%TYPE;
    V_NEW_POSTO HT01_SAUDE%ROWTYPE;
AFTER EACH ROW IS
BEGIN
    V_OLD_POSTOID := :OLD.PS_ID;
    V_OLD_POSTOBAIRRO := :OLD.PS_BAIRRO;    
END AFTER EACH ROW;

AFTER STATEMENT IS
BEGIN          
    SELECT COUNT(*) INTO V_EXISTS
    FROM HT01_SAUDE
    WHERE PS_BAIRRO = V_OLD_POSTOBAIRRO AND PS_ID != V_OLD_POSTOID;    
    
    IF V_EXISTS = 0 THEN
        RAISE E_NOT_EXISTS_POSTO;
    ELSE
        SELECT * INTO V_NEW_POSTO
        FROM HT01_SAUDE
        WHERE PS_BAIRRO = V_OLD_POSTOBAIRRO AND ROWNUM = 1;
    END IF;
    
    -- LOOP MEDICOS
    -- ...
    
    -- LOOP AGENTES DE SAUDE
    FOR C_AGSAUDE IN(SELECT * FROM HT03_AGSAUDE WHERE PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE HT03_AGSAUDE SET PS_ID = V_NEW_POSTO.PS_ID WHERE PS_ID = V_OLD_POSTOID;
        END LOOP;
        
    -- LOOP FAMILIAS
    FOR C_FAMILIA IN(SELECT * FROM HT04_FAMILIA WHERE PS_ID = V_OLD_POSTOID)
        LOOP
            UPDATE HT04_FAMILIA SET PS_ID = V_NEW_POSTO.PS_ID WHERE PS_ID = V_OLD_POSTOID;
        END LOOP;
    
    -- DBMS_OUTPUT.PUT_LINE('POSTO ' || V_NEW_POSTO.PS_BAIRRO || V_NEW_POSTO.PS_NOME);
    
    EXCEPTION
        WHEN E_NOT_EXISTS_POSTO THEN
            INSERT INTO HT12_ERRO VALUES(ERRO_ID_SEQ.NEXVAL, '-1234', 'NAO EXISTE POSTO DE SAUDE NO MESMO MUNICIPIO');
            DBMS_OUTPUT.PUT_LINE('NAO EXISTE POSTO DE SAUDE NO MESMO MUNICIPIO' || V_OLD_POSTOID);
END AFTER STATEMENT;

END;
